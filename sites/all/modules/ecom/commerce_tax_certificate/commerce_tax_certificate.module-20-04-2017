<?php
function commerce_tax_certificate_commerce_checkout_pane_info() {
  $commerce_tax_certificate_panes['commerce_tax_certificate'] = array(
    'title' => t('Tax Certificate'),
    'page' => 'checkout',
    'locked' => FALSE,
/*     'file' => 'includes/commerce_coupon.checkout_pane.inc', */
    'base' => 'commerce_tax_certificate_pane',
    'weight' => -10,
  );

  return $commerce_tax_certificate_panes;
}
function commerce_tax_certificate_commerce_tax_type_calculate_rates($tax_type, $line_item) {
}
function taxcertificate_load() {
$session_id=session_id();
$exists = db_select('tax_exempt_cert', 'r')
  ->fields('r',array('fid'))
  ->condition('sid', $session_id,'=')
  ->condition('ssid', $session_id,'=')
  ->range(0, 1)
  ->execute();
  $result = $exists->fetchObject();
	if(isset($result->fid) && !empty($result->fid)){
		return $result->fid;
	}
	return false;
}
function commerce_tax_certificate_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
	  watchdog("order",print_r($order,true));
$session_id=session_id();
$exists = db_select('tax_exempt_cert', 'r')
  ->fields('r',array('fid'))
  ->condition('sid', $session_id,'=')
  ->condition('ssid', $session_id,'=')
  ->range(0, 1)
  ->execute();
  $result = $exists->fetchObject();

  
  // Allow to replace pane content with ajax calls.
  $pane_form = array(
    '#prefix' => '<div id="commerce-checkout-tax-certificate-ajax-wrapper">',
    '#suffix' => '</div>',
  );
//get_file_by_sid();
  // Store the payment methods in the form for validation purposes.
  $pane_form['tax_exempt_in_the_state_of_texas_check'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tax Exempt in the State of Texas. Certificate Required.'),
    '#description' => t('Check Tax Exempt in the State of Texas. if chcekd then Certificate will Required.'),
  );
  $pane_form['tax_certificate'] = array(
    '#type' => 'managed_file',
    '#title' => t('Certificate file'),
    '#description' => t('Choose Certificate.'),
	/* '#required' => (isset($pane_form["values"]["tax_exempt_in_the_state_of_texas_check"])),*/
	'#states' => array(
			"visible" => array(
				"input[name='commerce_tax_certificate[tax_exempt_in_the_state_of_texas_check]']" => array("checked" => TRUE)),
			'required' => array(
				"input[name='commerce_tax_certificate[tax_exempt_in_the_state_of_texas_check]']" => array("checked" => TRUE)),
			),	
	  '#upload_validators' => array(
		'file_validate_extensions' => array('doc html'),
		),	
	'#default_value' => array($result->fid),
	'#upload_location'	=> 'public://test/',
  );

   $pane_form['save_certificate'] = array(
    '#type' => 'button',
    '#value' => t('Save Certificate'),
    '#name' => 'save_certificate',
    '#limit_validation_errors' => array(),
    '#ajax' => array(
        'callback' => 'commerce_tax_certificate_save_certificate_callback',
        'wrapper' => 'commerce-checkout-tax-certificate-ajax-wrapper',
      ),
    '#description' => t('Save Certificate.'),
  ); 
 /*   $pane_form['delete_certificate'] = array(
    '#type' => 'button',
    '#value' => t('Remove Certificate'),
    '#name' => 'delete_certificate',
    '#limit_validation_errors' => array(),
    '#ajax' => array(
        'callback' => 'commerce_tax_certificate_delete_certificate_callback',
        'wrapper' => 'commerce-checkout-tax-certificate-ajax-wrapper',
      ),
	'#states' => array(
			"invisible" => array(
				"input[name='file_tax_certificate']" => array("value" => '')),
			),	  
    '#description' => t('Delete Certificate.'),
  ); 
 */
/*   if (variable_get('commerce_coupon_checkout_enable_add_button', TRUE)) {
    $pane_form['coupon_add'] = array(
      '#type' => 'button',
      '#value' => t('Add coupon'),
      '#name' => 'coupon_add',
      '#limit_validation_errors' => array(),
      '#ajax' => array(
        'callback' => 'commerce_coupon_add_coupon_callback',
        'wrapper' => 'commerce-checkout-coupon-ajax-wrapper',
      ),
    );
  }

  // Extract the View and display keys from the cart contents pane setting.
  $pane_view = variable_get('commerce_coupon_checkout_pane_view', 'commerce_coupon_review_pane|checkout');
  if ($pane_view <> 'none') {
    list($view_id, $display_id) = explode('|', $pane_view);
    if (!empty($view_id) && !empty($display_id) && views_get_view($view_id)) {
      $pane_form['redeemed_coupons'] = array(
        '#type' => 'markup',
        '#markup' => commerce_embed_view($view_id, $display_id, array($order->order_id)),
      );
    }
  }

  if (isset($form_state['triggering_element']) && $form_state['triggering_element']['#name'] == 'coupon_add') {
    if (!empty($form_state['values']['commerce_coupon']['coupon_add'])) {
      list($view_id, $display_id) = explode('|', variable_get('commerce_coupon_review_pane_view', 'commerce_coupon_review_pane|checkout'));
      if (!empty($view_id) && !empty($display_id)) {
        global $_commerce_coupon_validation_error_message;
        $code = $form_state['input']['commerce_coupon']['coupon_code'];
        if (!empty($code) && commerce_coupon_code_is_valid($code, $order)) {
          $coupon = commerce_coupon_load_by_code($code);
          commerce_coupon_redeem_coupon($coupon, $order);

          // Clear the field value so that the coupon code does not get resubmitted
          // causing an error when user uses main "Continue to next step" submit.
          $pane_form['coupon_code']['#value'] = '';

          if (isset($order->order_id) && is_numeric($order->order_id)) {
            // This is to get the summary of the form rerendered.
            $alter_coupon_commands = &drupal_static('alter_coupon_commands');
            $coupon_current_order = &drupal_static('coupon_current_order');
            $alter_coupon_commands = TRUE;
            $coupon_current_order = $order->order_id;
          }
          // Force shopping cart refresh to recalculate all prices there,
          // which is not done automatically in case of percentage coupons.
          commerce_cart_order_refresh($order);
          $pane_form['redeemed_coupons']['#markup'] = commerce_embed_view($view_id, $display_id, array($order->order_id));
        }
        else {
          if (isset($_commerce_coupon_validation_error_message)) {
            $message = $_commerce_coupon_validation_error_message;
          }
          else {
            $message = t('Your coupon code is not valid.');
          }
          form_set_error('commerce_coupon][coupon_code', $message);
        }
      }
    }
  }

  // Display any new status messages added by this pane within the pane's area.
  */
  if (drupal_get_messages(NULL, FALSE)) {
    $pane_form['status_messages'] = array(
      '#type' => 'markup',
      '#markup' => theme('status_messages'),
      '#weight' => -1,
    );
  }
 
  return $pane_form;
}
function commerce_tax_certificate_save_certificate_callback($form, &$form_state){
global $user;
$session_id=session_id();
watchdog("extaxc",print_r($form_state['values']['tax_certificate'],true));

  // Load the file via file.fid.
  $file = file_load($form_state['values']['commerce_tax_certificate']['tax_certificate']);




    //$file = file_save_upload('file_tax_certificate', array('file_validate_extensions' => array('doc html')), "public://test", FILE_EXISTS_REPLACE);
    if ($file) {
		
  // Change status to permanent.

		// Save.
$exists = db_select('tax_exempt_cert', 'r')
  ->fields('r')
  ->condition('sid', $session_id,'=')
  ->condition('ssid', $session_id,'=')
  ->range(0, 1)
  ->execute()
  ->rowCount();
		$file->status = FILE_STATUS_PERMANENT;
		if(file_save($file)){
			if(!$exists){
			$nid = db_insert('tax_exempt_cert') // Table name no longer needs {}
			->fields(array(
			  'sid' => $session_id,
			  'ssid' => $session_id,
			  'fid' => $file->fid,
			))
			->execute();
		drupal_set_message("file uploaded");			
		}else{
			$nid = db_update('tax_exempt_cert') // Table name no longer needs {}
			->fields(array(
			  'sid' => $session_id,
			  'ssid' => $session_id,
			  'fid' => $file->fid,
			))			
  ->condition('sid', $session_id, '=')
  ->condition('ssid', $session_id, '=')
  ->execute();	
		drupal_set_message("file updated");  
		}
		
		// Record that the module (in this example, user module) is using the file. 
		

		}
		file_usage_add($file, 'file', 'commerce_tax_certificate', $user->uid); 
    } else {
        drupal_set_message(t('No file uploaded.'), 'warning');
    }
return $form['commerce_tax_certificate'];
}



function commerce_tax_certificate_delete_certificate_callback($form, &$form_state){
	drupal_set_message(t("File temporary Removed, Please save it to change permannent."));
	watchdog("extaxc",print_r($form_state['values'],true));
	$form['commerce_tax_certificate']['tax_exempt_in_the_state_of_texas_check']['#value'] = false;
return $form['commerce_tax_certificate'];
}
/* function commerce_tax_certificate_pane_checkout_form_submit(&$form, &$form_state) {
  // Submit logic - runs when validation is ok
  // You can alter the form here to be just a markup field if you want.
}

function commerce_tax_certificate_pane_checkout_form_validate(&$form, &$form_state) {
	//watchdog("tax",print_r($form,true));
  // Validation logic - invalidate using form_set_error() or form_error()
} */